{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","username","setUsername","className","onSubmit","e","preventDefault","reposUrl","gistsUrl","followersUrl","followingUrl","starredUrl","requests","axios","get","params","per_page","all","then","spread","repos","gists","followers","following","starred","data","statusText","console","log","err","catch","getDetails","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAuEeA,EAnEH,WAAO,IAAD,EAEeC,mBAAS,IAFxB,mBAETC,EAFS,KAEAC,EAFA,KAwDhB,OACE,qBAAKC,UAAU,MAAf,SACE,uBAAMC,SAPS,SAACC,GAClBA,EAAEC,iBA5Ca,WAEf,IAAMC,EAAQ,uCAAmCN,EAAnC,UACRO,EAAQ,uCAAmCP,EAAnC,UACRQ,EAAY,uCAAmCR,EAAnC,cACZS,EAAY,uCAAmCT,EAAnC,cACZU,EAAU,uCAAmCV,EAAnC,YAOVW,EAAW,CACfC,IAAMC,IAAIP,EAAU,CAAEQ,OAAQ,CAAEC,SAAU,OAC1CH,IAAMC,IAAIN,EAAU,CAAEO,OAAQ,CAAEC,SAAU,OAC1CH,IAAMC,IAAIL,EAAc,CAAEM,OAAQ,CAAEC,SAAU,OAC9CH,IAAMC,IAAIJ,EAAc,CAAEK,OAAQ,CAAEC,SAAU,OAC9CH,IAAMC,IAAIH,EAAY,CAAEI,OAAQ,CAAEC,SAAU,QAG9CH,IAAMI,IAAIL,GACPM,KAAKL,IAAMM,QAAO,WACjB,IAAMC,EAAK,wCACLC,EAAK,wCACLC,EAAS,wCACTC,EAAS,wCACTC,EAAO,wCAEPC,EAAO,CACXxB,WACAmB,MAA4B,OAArBA,EAAMM,WAAsBN,EAAMK,KAAO,KAChDJ,MAA4B,OAArBA,EAAMK,WAAsBL,EAAMI,KAAO,KAChDH,UAAoC,OAAzBA,EAAUI,WAAsBJ,EAAUG,KAAO,KAC5DF,UAAoC,OAAzBA,EAAUG,WAAsBH,EAAUE,KAAO,KAC5DD,QAAgC,OAAvBA,EAAQE,WAAsBF,EAAQC,KAAO,MAGxDE,QAAQC,IAAIH,OACV,SAAAI,GAAG,OAAIF,QAAQC,IAAIC,MACtBC,OAAM,SAAAD,GAAG,OAAIF,QAAQC,IAAIC,MAK5BE,IAKE,UACE,+DACA,uBAAOC,KAAK,OAAOC,MAAOhC,EAAUiC,SAxDrB,SAAC7B,GACpBH,EAAYG,EAAE8B,OAAOF,UAwDjB,wBAAQD,KAAK,SAAb,0BCrDOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d8ecb581.chunk.js","sourcesContent":["import './App.css';\nimport axios from 'axios'\nimport {useState} from 'react'\n\nconst App = () => {\n\n  const [username,setUsername] = useState('')\n\n  const updateUsername=(e)=>{\n    setUsername(e.target.value)\n  }\n\n  const getDetails=()=>{\n    // URLs to be used for different API endpoints\n    const reposUrl = `https://api.github.com/users/${username}/repos`,\n          gistsUrl = `https://api.github.com/users/${username}/gists`,\n          followersUrl = `https://api.github.com/users/${username}/followers`,\n          followingUrl = `https://api.github.com/users/${username}/following`,\n          starredUrl = `https://api.github.com/users/${username}/starred`;\n\n    /**\n     * The API returns atmost 30 entries by default unless the\n     * 'per_page' GET parameter is specified, which can be a\n     * 100 at maximum. Multiple calls for each page are required\n     * to fetch all entries. */\n    const requests = [\n      axios.get(reposUrl, { params: { per_page: 100 } }),\n      axios.get(gistsUrl, { params: { per_page: 100 } }),\n      axios.get(followersUrl, { params: { per_page: 100 } }),\n      axios.get(followingUrl, { params: { per_page: 100 } }),\n      axios.get(starredUrl, { params: { per_page: 100 } })\n    ];\n\n    axios.all(requests)\n      .then(axios.spread((...responses) => {\n        const repos = responses[0],\n              gists = responses[1],\n              followers = responses[2],\n              following = responses[3],\n              starred = responses[4];\n\n        const data = {\n          username,\n          repos: repos.statusText === 'OK' ? repos.data : null,\n          gists: gists.statusText === 'OK' ? gists.data : null,\n          followers: followers.statusText === 'OK' ? followers.data : null,\n          following: following.statusText === 'OK' ? following.data : null,\n          starred: starred.statusText === 'OK' ? starred.data : null,\n        };\n\n        console.log(data);\n      }), err => console.log(err))\n      .catch(err => console.log(err));\n  }\n\n  const sendUsername=(e)=>{\n    e.preventDefault()\n    getDetails(username)\n  }\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={sendUsername}>\n        <label>Enter your github username</label>\n        <input type='text' value={username} onChange={updateUsername}/>\n        <button type='submit'>Search</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}